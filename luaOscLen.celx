function flash(message)
   celestia:flash(message)
   wait(0)
end

celestia:requestsystemaccess()
wait(0)

local socket = require("socket")
local osc = require("osc")
local math = require("math")
local table = require("table")
-- server

udp = socket.udp()
udp:setsockname("*", 8000)
udp:settimeout(0)

-- state vars

planets = {}

speed_multi = 1

left_rot_step = math.rad(-90) / 30
right_rot_step = math.rad(90) / 30

do_left = 0
do_right = 0

x_vector = celestia:newvector(1,0,0)
y_vector = celestia:newvector(0,1,0)
z_vector = celestia:newvector(0,0,1)

obs = celestia:getobserver()

-- functions 
 
function visit_planets (planets)
  for k,v in pairs(planets) do
    planet = celestia:find("Sol/" .. v)
    celestia:select(planet)
    obs:goto(planet, 10.0)
    name = planet:name()
    info_table = planet:getinfo()
    celestia:print("---- Planet " .. name .. " ----\n" ..
      "Type: " .. info_table.type .. "\n" ..
      "Name: " .. info_table.name .. "\n" ..
      "Oblateness: " .. info_table.oblateness .. "\n" ..
      "Albedo: " .. info_table.albedo .. "\n" ..
      "Radius: " .. info_table.radius .. "\n" ..
      "Lifespan Start: " .. info_table.lifespanStart .. "\n" ..
      "Lifespan End: " .. info_table.lifespanEnd .. "\n" ..
      "Rotation Period: " .. info_table.rotationPeriod .. "\n" ..
      "orbit Period: " .. info_table.orbitPeriod .. "\n", 20.0, -1, -1, 2, 25)
    wait(10.0)
  end
  return {}
end

-- http://stackoverflow.com/questions/1426954/split-string-in-lua
function split(pString, pPattern)
   if #pString == 0 then
    return ""
   end
   local Table = {}  -- NOTE: use {n = 0} in Lua-5.0
   local fpat = "(.-)" .. pPattern
   local last_end = 1
   local s, e, cap = pString:find(fpat, 1)
   while s do
      if s ~= 1 or cap ~= "" then
      table.insert(Table,cap)
      end
      last_end = e+1
      s, e, cap = pString:find(fpat, last_end)
   end
   if last_end <= #pString then
      cap = pString:sub(last_end)
      table.insert(Table, cap)
   end
   return Table
end

function toInt(s) 
  return tonumber(s) or (s == "" and 0) or error("expected number string, got " .. s .. " type of:" ..type(s)) 
end 

-- server main loop

while true do

    data = udp:receive(4096)

    if data then
        url, intx, inty = osc.unpack(data)

        if inty then
          flash("osc: " .. url .. " --> " .. intx .. "/" .. inty)
        else
          if intx then
            flash("osc: " .. url .. " --> " .. intx)
          end
        end
 
        -- handle manual x/y control
        if url == "/cel/xy1" then
          rot = celestia:newrotation(x_vector, math.rad(intx / 90))
          obs:rotate(rot)
          rot = celestia:newrotation(y_vector, math.rad(inty / 90))
          obs:rotate(rot)
        end

        -- speed control
        if url == "/cel/speed" then
          uly_to_km = 9460730.4725808
          obs:setspeed((intx * speed_multi)/uly_to_km)
        end

        -- speed multi
        if string.find(url, "/cel/smulti/") then
          url_parts = split(url, "/")
          speed_multi = toInt(url_parts[3])
        end 

        -- rotate left
        if url == "/cel/rot_l" then
          do_left = intx
        end

        -- rotate right
        if url == "/cel/rot_r" then
          do_right = intx
        end
  
        -- set planet state
        if string.find(url, "/cel/nav/") then
          if url ~= "/cel/nav/event/go" then
            if intx == 1 then
              url_parts = split(url, "/")
              flash("scheduling trip to:" .. url_parts[3])
            end
            planets[#planets + 1] = url_parts[3]
          else 
            if intx ==1 then
              flash("starting planet tour ... ")
              planets = visit_planets(planets)
            end
          end
        end
    end

    if do_left ~= 0 then
      rot = celestia:newrotation(z_vector, (left_rot_step * intx))
      obs:rotate(rot)
      wait(0)
    end
    if do_right ~= 0 then
      rot = celestia:newrotation(z_vector, (right_rot_step * intx))
      obs:rotate(rot)
      wait(0)
    end

    socket.sleep(0.01)
    wait(0)

end
